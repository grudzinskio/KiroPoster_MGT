name: Comprehensive Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: poster_campaign_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Wait for MariaDB
      run: |
        while ! mysqladmin ping -h"127.0.0.1" -P3306 -utest_user -ptest_password --silent; do
          sleep 1
        done

    - name: Set up test environment
      working-directory: ./backend
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "DB_HOST=127.0.0.1" >> .env.test
        echo "DB_PORT=3306" >> .env.test
        echo "DB_USER=test_user" >> .env.test
        echo "DB_PASSWORD=test_password" >> .env.test
        echo "DB_NAME=poster_campaign_test" >> .env.test
        echo "JWT_SECRET=test_jwt_secret_key_for_testing_only" >> .env.test
        echo "JWT_REFRESH_SECRET=test_refresh_secret_key_for_testing_only" >> .env.test

    - name: Run database migrations
      working-directory: ./backend
      run: npm run db:migrate
      env:
        NODE_ENV: test

    - name: Run unit tests
      working-directory: ./backend
      run: npm run test:unit
      env:
        NODE_ENV: test

    - name: Run integration tests
      working-directory: ./backend
      run: npm run test:integration
      env:
        NODE_ENV: test

    - name: Run end-to-end tests
      working-directory: ./backend
      run: npm run test:e2e
      env:
        NODE_ENV: test

    - name: Run security tests
      working-directory: ./backend
      run: npm run test:security
      env:
        NODE_ENV: test

    - name: Run performance tests
      working-directory: ./backend
      run: npm run test:performance
      env:
        NODE_ENV: test

    - name: Generate test coverage
      working-directory: ./backend
      run: npm run test:coverage
      env:
        NODE_ENV: test

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage

  frontend-tests:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test

    - name: Run component tests
      working-directory: ./frontend
      run: npm run test:components

    - name: Generate test coverage
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: poster_campaign_e2e
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Set up test environment
      run: |
        cd backend
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "DB_HOST=127.0.0.1" >> .env.test
        echo "DB_PORT=3306" >> .env.test
        echo "DB_USER=test_user" >> .env.test
        echo "DB_PASSWORD=test_password" >> .env.test
        echo "DB_NAME=poster_campaign_e2e" >> .env.test
        echo "JWT_SECRET=test_jwt_secret_key_for_testing_only" >> .env.test
        echo "JWT_REFRESH_SECRET=test_refresh_secret_key_for_testing_only" >> .env.test

    - name: Run database migrations
      working-directory: ./backend
      run: npm run db:migrate
      env:
        NODE_ENV: test

    - name: Start backend server
      working-directory: ./backend
      run: npm start &
      env:
        NODE_ENV: test

    - name: Build and start frontend
      working-directory: ./frontend
      run: |
        npm run build
        npm run preview &

    - name: Wait for services
      run: |
        npx wait-on http://localhost:3000 http://localhost:4173 --timeout 60000

    - name: Install Playwright
      run: npx playwright install --with-deps

    - name: Run Playwright tests
      run: npx playwright test
      env:
        BACKEND_URL: http://localhost:3000
        FRONTEND_URL: http://localhost:4173

    - name: Upload Playwright report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run npm audit (backend)
      working-directory: ./backend
      run: npm audit --audit-level moderate

    - name: Run npm audit (frontend)
      working-directory: ./frontend
      run: npm audit --audit-level moderate

  performance-benchmarks:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: poster_campaign_perf
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Set up performance test environment
      working-directory: ./backend
      run: |
        cp .env.example .env.test
        echo "NODE_ENV=test" >> .env.test
        echo "DB_HOST=127.0.0.1" >> .env.test
        echo "DB_PORT=3306" >> .env.test
        echo "DB_USER=test_user" >> .env.test
        echo "DB_PASSWORD=test_password" >> .env.test
        echo "DB_NAME=poster_campaign_perf" >> .env.test
        echo "JWT_SECRET=test_jwt_secret_key_for_testing_only" >> .env.test
        echo "JWT_REFRESH_SECRET=test_refresh_secret_key_for_testing_only" >> .env.test

    - name: Run database migrations
      working-directory: ./backend
      run: npm run db:migrate
      env:
        NODE_ENV: test

    - name: Run performance benchmarks
      working-directory: ./backend
      run: npm run test:performance -- --reporter=json --outputFile=performance-results.json
      env:
        NODE_ENV: test

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: backend/performance-results.json
        retention-days: 30

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../frontend && npm ci

    - name: Run ESLint (backend)
      working-directory: ./backend
      run: npx eslint src/ --ext .ts --format json --output-file eslint-results.json || true

    - name: Run ESLint (frontend)
      working-directory: ./frontend
      run: npm run lint -- --format json --output-file eslint-results.json || true

    - name: Run TypeScript compiler check (backend)
      working-directory: ./backend
      run: npx tsc --noEmit

    - name: Run TypeScript compiler check (frontend)
      working-directory: ./frontend
      run: npx tsc --noEmit

    - name: Upload code quality results
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-results
        path: |
          backend/eslint-results.json
          frontend/eslint-results.json
        retention-days: 30

  test-summary:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, security-scan]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY